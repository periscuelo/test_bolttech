// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Task {
  id             String           @id @default(uuid())
  project        Project          @relation(fields: [projectId], references: [id])
  projectId      String
  description    String           @db.VarChar(255)
  done           Boolean          @db.TinyInt
  createdAt      DateTime         @default(now()) @db.DateTime(0)
  finishedAt     DateTime?        @db.DateTime(0)
  updatedAt      DateTime         @updatedAt @db.DateTime(0)
  deletedAt      DateTime?        @db.DateTime(0)
  UserInProjects UserInProjects[]

  @@map(name: "tasks")
}

model Project {
  id             String           @id @default(uuid())
  title          String           @db.VarChar(255)
  createdAt      DateTime         @default(now()) @db.DateTime(0)
  updatedAt      DateTime         @updatedAt @db.DateTime(0)
  deletedAt      DateTime?        @db.DateTime(0)
  userInProjects UserInProjects[]
  Task           Task[]

  @@map(name: "projects")
}

model User {
  id             String           @id @default(uuid())
  name           String           @db.VarChar(255)
  email          String           @unique @db.VarChar(255)
  password       String           @db.VarChar(255)
  token          String?          @db.Text
  createdAt      DateTime         @default(now()) @db.DateTime(0)
  updatedAt      DateTime         @updatedAt @db.DateTime(0)
  deletedAt      DateTime?        @db.DateTime(0)
  userInProjects UserInProjects[]

  @@map(name: "users")
}

model UserInProjects {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  project   Project   @relation(fields: [projectId], references: [id])
  projectId String
  createdAt DateTime  @default(now()) @db.DateTime(0)
  updatedAt DateTime  @updatedAt @db.DateTime(0)
  deletedAt DateTime? @db.DateTime(0)
  Task      Task?     @relation(fields: [taskId], references: [id])
  taskId    String?

  @@unique([userId, projectId])
  @@map(name: "user_projects")
}
